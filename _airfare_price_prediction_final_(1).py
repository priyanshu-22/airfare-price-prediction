# -*- coding: utf-8 -*-
"""_airfare price prediction final (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OoPVEMRlWzpum6kKVVFsDMKgNXNXasi4
"""

import numpy as np
import  matplotlib.pyplot as plt
import pandas as pd
df = pd.read_excel('Data_Train.xlsx')

df.head()

df.info()

df['Duration'].value_counts()

df.isnull().sum()
df.dropna(inplace=True)

df['day']=pd.to_datetime(df.Date_of_Journey,format="%d/%m/%Y").dt.day

df['month']=pd.to_datetime(df.Date_of_Journey,format="%d/%m/%Y").dt.month

df.drop(["Date_of_Journey"],inplace=True,axis=1)

df['dep_hour']=pd.to_datetime(df.Dep_Time).dt.hour

df["dep_min"]=pd.to_datetime(df.Dep_Time).dt.minute
df.drop(['Dep_Time'],inplace=True,axis=1)



df['arr_hour']=pd.to_datetime(df.Arrival_Time).dt.hour
df['arr_min']=pd.to_datetime(df.Arrival_Time).dt.minute
df.drop(['Arrival_Time'],inplace=True,axis=1)

df.shape

df['Airline'].value_counts()

i1 = df[df['Airline'] == 'Trujet'].index
df.drop(i1 , inplace=True)
i2 = df[df['Airline'] == 'Multiple carriers Premium economy'].index
df.drop(i2 , inplace=True)
i3 = df[df['Airline'] == 'Jet Airways Business'].index
df.drop(i3 , inplace=True)
i4 = df[df['Airline'] == 'Vistara Premium economy'].index
df.drop(i4 , inplace=True)
i4 = df[df['Airline'] == 'Vistara'].index
df.drop(i4 , inplace=True)
i5 = df[df['Airline'] == 'Air Asia'].index
df.drop(i5 , inplace=True)
i6 = df[df['Airline'] == 'GoAir'].index
df.drop(i6 , inplace=True)

df.shape

dur=list(df['Duration'])
dur_hour=[]
dur_min=[]

for i in range(len(dur)):
    for j in range(len(dur[i])):
        if dur[i][j]=="h":
            t=dur[i].index("h")
            dur_hour.append(int(dur[i][0:t]))
dur_hour.append(int("1"))
df["Duration_hours"] = dur_hour
df.head()

df['Destination'].value_counts()

df["Destination"].replace({"New Delhi": "Delhi"}, inplace=True)



dur=list(df['Duration'])
k="m"
dur_min=[]

for i in range(len(dur)):
    for j in range(len(dur[i])):
        if dur[i][j]=="h" and dur[i][j]!=" ":
            
             t=dur[i].index("h")
             dur_min.append(dur[i][t+2:-1])
dur_min.append("1")
df["Duration_min"] = dur_min
df.head()

df["Duration_min"].replace({"": int("0")}, inplace=True)

df['Destination'].value_counts()

df['Duration_min'] = df['Duration_min'].astype(int)



df.drop(['Duration'],inplace=True,axis=1)
df.head()

air=df[['Airline']]
air=pd.get_dummies(air)
air.head()

air.shape

region=df[['Source']]
region=pd.get_dummies(region)
region.head()

df['Destination'].value_counts()

dest=df[['Destination']]
dest=pd.get_dummies(dest)
dest.head()



dest.shape

df['Additional_Info'].value_counts()

df['Route'].value_counts()

df['Total_Stops'].value_counts()

df.drop(['Route','Additional_Info'],inplace=True,axis=1)



df['Destination'].value_counts()

df.replace({"non-stop":0,"1 stop":1,"2 stops":2,"3 stops":3,'4 stops':4},inplace=True)
df.head()

dff=pd.concat([df,air,region,dest],axis=1)
dff.head()

dff.drop(["Airline", "Source", "Destination"], axis = 1, inplace = True)

dff.head()

y=dff.columns
print(y)

df['Destination'].value_counts()

print(len(y))

x=dff.loc[:,['Total_Stops', 'day', 'month', 'dep_hour', 'dep_min',
       'arr_hour', 'arr_min', 'Duration_hours', 'Duration_min',
       'Airline_Air India', 'Airline_IndiGo', 'Airline_Jet Airways',
       'Airline_Multiple carriers', 'Airline_SpiceJet', 'Source_Banglore',
       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai',
       'Destination_Banglore', 'Destination_Cochin', 'Destination_Delhi',
       'Destination_Hyderabad', 'Destination_Kolkata']]

x.head()

y=dff.iloc[:,1]
y.head()



import seaborn as sns
plt.figure(figsize=(20,20))
sns.heatmap(df.corr(),annot=True,cmap="RdYlGn")

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=200)



from sklearn.ensemble import RandomForestRegressor
reg=RandomForestRegressor()
reg.fit(x_train,y_train)

x.info()

y_pred=reg.predict(x_test)

reg.score(x_train,y_train)

reg.score(x_test,y_test)

sns.distplot(y_test-y_pred)
plt.show()

plt.scatter(y_test,y_pred,alpha=0.5)
plt.xlabel("y_test")
plt.ylabel("y_label")
plt.show()

from sklearn import metrics
print("RMSE",np.sqrt(metrics.mean_squared_error(y_test,y_pred)))
print("MSE",metrics.mean_squared_error(y_test,y_pred))
print("MAE",metrics.mean_absolute_error(y_test,y_pred))
print("R2 SCORE",metrics.r2_score(y_test,y_pred))

from sklearn.model_selection import RandomizedSearchCV
n_estimators=[int(x) for x in np.linspace(start=100,stop=1200,num=12)]
max_features=['auto','sqrt']
max_depth=[int(x) for x in np.linspace(5,30,num=6)]
min_samples_split=[2,5,10,15,30,100]
min_samples_leaf=[1,2,5,10]

grid = {'n_estimators': n_estimators,
               'max_features': max_features,
               'max_depth': max_depth,
               'min_samples_split': min_samples_split,
               'min_samples_leaf': min_samples_leaf}

rf_random = RandomizedSearchCV(estimator = reg, param_distributions =grid,scoring='neg_mean_squared_error', n_iter = 10, cv = 5, verbose=2, random_state=42, n_jobs = 1)

rf_random.fit(x_train,y_train)



rf_random.best_params_

predicted_Value=rf_random.predict(x_test)

metrics.r2_score(y_test, predicted_Value)

rf_random.score(x_test,y_test)

rf_random.score(x_train,y_train)

import pickle
file=open("airfare.pkl",'wb')
pickle.dump(rf_random,file)

model=open("airfare.pkl",'rb')
air=pickle.load(model)

final_value=air.predict(x_test)
metrics.r2_score(y_test,final_value)

final_value[0]

x=list(y_test)
print(x[0])

b=x_train

u=np.array(x_train)

print(u[9])



o=b.columns
 len(o)





